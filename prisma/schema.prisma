generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////////////////////////////////////////////////
//                      MODELS
////////////////////////////////////////////////////////

/// The user model, representing all users in the system.
/// Includes technicians, coordinators, warehouse managers, and admins.
model User {
  id                        String             @id @default(uuid())
  email                     String             @unique
  name                      String
  createdAt                 DateTime           @default(now())
  identyficator             Int?               @unique
  password                  String
  phoneNumber               String
  role                      Role               @default(TECHNICIAN)
  status                    UserStatus         @default(ACTIVE)
  updatedAt                 DateTime           @updatedAt
  orders                    Order[]
  orderHistory              OrderHistory[]
  warehouseItems            Warehouse[]        @relation("WarehouseAssignedTo")
  warehouseHistoryAssigned  WarehouseHistory[] @relation("WarehouseHistoryAssignedTo")
  warehouseHistoryPerformed WarehouseHistory[] @relation("WarehouseHistoryPerformedBy")
}

/// The order model, representing job assignments in the system.
model Order {
  id                String         @id @default(uuid())
  operator          String      
  type              OrderType
  orderNumber       String         
  date              DateTime
  timeSlot          TimeSlot
  standard          Standard?
  contractRequired  Boolean       
  equipmentNeeded   String[]      @default([])
  clientPhoneNumber String?
  notes             String?
  status            OrderStatus    @default(PENDING)
  county            String?
  municipality      String?
  city              String
  street            String
  postalCode        String
  assignedToId      String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  assignedTo        User?          @relation(fields: [assignedToId], references: [id])
  history           OrderHistory[]
  assignedEquipment Warehouse[]    @relation("WarehouseAssignedToOrder")
  @@unique([orderNumber, date])
}

/// Tracks changes in order statuses.
model OrderHistory {
  id            String      @id @default(uuid())
  orderId       String
  changedById   String
  changeDate    DateTime    @default(now())
  statusBefore  OrderStatus
  statusAfter   OrderStatus
  notes         String?
  equipmentUsed String[]
  changedBy     User        @relation(fields: [changedById], references: [id])
  order         Order       @relation(fields: [orderId], references: [id])
}

/// Represents items stored in the warehouse.
model Warehouse {
  id              String             @id @default(uuid())
  itemType        WarehouseItemType
  name            String
  category        DeviceCategory?
  subcategory     String?
  serialNumber    String?           @unique
  quantity        Int
  unit            MaterialUnit     @default(PIECE)
  index           String?           @unique
  warningAlert    Int?              @default(10)
  alarmAlert      Int?              @default(5)
  price           Float
  status          WarehouseStatus
  assignedToId    String?
  assignedOrderId String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  assignedOrder   Order?             @relation("WarehouseAssignedToOrder", fields: [assignedOrderId], references: [id])
  assignedTo      User?              @relation("WarehouseAssignedTo", fields: [assignedToId], references: [id])
  history         WarehouseHistory[]
}

/// Defines different types of devices available in the warehouse.
model DeviceDefinition {
  id       String         @id @default(uuid())
  category DeviceCategory
  name     String
  warningAlert  Int?           @default(10)
  alarmAlert    Int?           @default(5)
  price         Float?         @default(0)
}

model MaterialDefinition {
  id   String @id @default(uuid())
  name String @unique
  warningAlert  Int?           @default(10)
  alarmAlert    Int?           @default(5)
  unit          MaterialUnit  @default(PIECE)
  index         String?
  price         Float?         @default(0)
}

model OperatorDefinition {
  operator String @unique
}

/// Represents rate definitions for different services.
model RateDefinition {
  id     String @id @default(uuid())
  code   String
  amount Float
}

/// Tracks warehouse operations like receiving, issuing, or returning items.
model WarehouseHistory {
  id              String          @id @default(uuid())
  warehouseItemId String
  action          WarehouseAction
  performedById   String
  assignedToId    String?
  actionDate      DateTime        @default(now())
  notes           String?
  quantity        Int?
  assignedTo      User?           @relation("WarehouseHistoryAssignedTo", fields: [assignedToId], references: [id])
  performedBy     User            @relation("WarehouseHistoryPerformedBy", fields: [performedById], references: [id])
  warehouseItem   Warehouse       @relation(fields: [warehouseItemId], references: [id])
}

////////////////////////////////////////////////////////
//                      ENUMS
////////////////////////////////////////////////////////

/// Defines user roles within the system.
enum Role {
  TECHNICIAN
  COORDINATOR
  WAREHOUSEMAN
  ADMIN
}

/// Defines the status of a user.
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

/// Defines the status of an order.
enum OrderStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  NOT_COMPLETED
  CANCELED
}

//define order type
enum OrderType {
  INSTALATION
  SERVICE
}

/// Defines the standard of execution for an order.
enum Standard {
  W1
  W2
  W3
  W4
  W5
  W6
}

/// Defines time slots for order scheduling.
enum TimeSlot {
  EIGHT_TEN          @map("8-10")    // 08:00 - 10:00
  TEN_TWELVE         @map("10-12")   // 10:00 - 12:00
  TWELVE_FOURTEEN    @map("12-14")   // 12:00 - 14:00
  FOURTEEN_SIXTEEN   @map("14-16")   // 14:00 - 16:00
  SIXTEEN_EIGHTEEN   @map("16-18")   // 16:00 - 18:00
  EIGHTEEN_TWENTY    @map("18-20")   // 18:00 - 20:00

  NINE_TWELVE        @map("9-12")    // 09:00 - 12:00
  TWELVE_FIFTEEN     @map("12-15")   // 12:00 - 15:00
  FIFTEEN_EIGHTEEN   @map("15-18")   // 15:00 - 18:00
  EIGHTEEN_TWENTYONE @map("18-21")   // 18:00 - 21:00
}


/// Defines item types in the warehouse.
enum WarehouseItemType {
  DEVICE
  MATERIAL
}

/// Defines categories of devices.
enum DeviceCategory {
  MODEM
  DECODER
  ONT
  AMPLIFIER
  UA
  OTHER
}

/// Defines measurement units for warehouse items.
enum MaterialUnit {
  PIECE
  METER
}

/// Defines the status of items in the warehouse.
enum WarehouseStatus {
  AVAILABLE
  ASSIGNED
  RETURNED
  ASSIGNED_TO_ORDER
}

/// Defines possible warehouse operations.
enum WarehouseAction {
  RECEIVED
  ISSUED
  RETURNED
}
