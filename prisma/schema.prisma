generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// -------------------------------
/// User model
/// -------------------------------
model User {
  id                        String              @id @default(uuid())
  email                     String              @unique
  name                      String
  createdAt                 DateTime            @default(now())
  identyficator             Int?                @unique
  password                  String
  phoneNumber               String
  role                      Role                @default(TECHNICIAN)
  status                    UserStatus          @default(ACTIVE)
  updatedAt                 DateTime            @updatedAt
  deletedAt                 DateTime?

  orders                    Order[]
  transferredOrders         Order[]             @relation("OrderTransfer")
  orderHistory              OrderHistory[]
  settings                  TechnicianSettings?
  warehouseItems            Warehouse[]         @relation("WarehouseAssignedTo")
  transferredWarehouseItems Warehouse[]         @relation("WarehouseTransfer")
  warehouseHistoryAssigned  WarehouseHistory[]  @relation("WarehouseHistoryAssignedTo")
  warehouseHistoryPerformed WarehouseHistory[]  @relation("WarehouseHistoryPerformedBy")

  locations WarehouseLocation[] @relation("UserLocations")

  // Location transfers
  requestedTransfers LocationTransfer[] @relation("RequestedTransfers")
  confirmedTransfers LocationTransfer[] @relation("ConfirmedTransfers")
}

/// -------------------------------
/// Order model
/// -------------------------------
model Order {
  id                String                 @id @default(uuid())
  orderNumber       String
  date              DateTime
  timeSlot          TimeSlot
  clientPhoneNumber String?
  notes             String?
  status            OrderStatus            @default(PENDING)

  county            String?
  municipality      String?
  city              String
  street            String
  postalCode        String?

  assignedToId      String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  operator          String
  type              OrderType

  closedAt          DateTime?
  failureReason     String?
  transferPending   Boolean                @default(false)
  transferToId      String?
  completedAt       DateTime?

  assignedTo        User?                  @relation(fields: [assignedToId], references: [id])
  transferTo        User?                  @relation("OrderTransfer", fields: [transferToId], references: [id])
  assignedEquipment OrderEquipment[]       @relation("OrderToOrderEquipment")
  history           OrderHistory[]
  usedMaterials     OrderMaterial[]
  settlementEntries OrderSettlementEntry[]
  warehouseHistory  WarehouseHistory[]     @relation("OrderToWarehouseHistory")
  services          OrderService[]

  @@unique([orderNumber, date])
}

/// -------------------------------
/// OrderMaterial
/// -------------------------------
model OrderMaterial {
  id         String             @id @default(uuid())
  orderId    String
  materialId String
  quantity   Int
  unit       MaterialUnit

  material   MaterialDefinition @relation("MaterialToOrderMaterial", fields: [materialId], references: [id])
  order      Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

/// -------------------------------
model OrderSettlementEntry {
  id       String         @id @default(uuid())
  orderId  String
  code     String
  quantity Int

  rate     RateDefinition @relation("RateDefinitionToSettlement", fields: [code], references: [code])
  order    Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

/// -------------------------------
model OrderService {
  id              String       @id @default(uuid())
  orderId         String
  type            ServiceType
  deviceId        String?
  serialNumber    String?
  deviceId2       String?
  serialNumber2   String?
  speedTest       String?
  usDbmDown       Float?
  usDbmUp         Float?
  notes           String?
  createdAt       DateTime     @default(now())

  order           Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

/// -------------------------------
model OrderHistory {
  id            String      @id @default(uuid())
  orderId       String
  changedById   String
  changeDate    DateTime    @default(now())
  statusBefore  OrderStatus
  statusAfter   OrderStatus
  notes         String?
  equipmentUsed String[]

  changedBy     User        @relation(fields: [changedById], references: [id])
  order         Order       @relation(fields: [orderId], references: [id])
}

/// -------------------------------
model OrderEquipment {
  id          String    @id @default(uuid())
  orderId     String
  warehouseId String

  order       Order     @relation("OrderToOrderEquipment", fields: [orderId], references: [id], onDelete: Cascade)
  warehouse   Warehouse @relation("WarehouseToOrderEquipment", fields: [warehouseId], references: [id])

  @@unique([orderId, warehouseId])
  @@index([orderId])
}

/// -------------------------------
/// Warehouse
/// -------------------------------
model Warehouse {
  id                   String              @id @default(uuid())
  itemType             WarehouseItemType
  name                 String
  category             DeviceCategory?
  provider             DeviceProvider?     @map("subcategory")
  serialNumber         String?             @unique
  quantity             Int
  unit                 MaterialUnit        @default(PIECE)
  price                Float
  status               WarehouseStatus
  assignedToId         String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  alarmAlert           Int?                @default(5)
  index                String?
  warningAlert         Int?                @default(10)
  materialDefinitionId String?
  transferPending      Boolean             @default(false)
  transferToId         String?

  orderAssignments     OrderEquipment[]    @relation("WarehouseToOrderEquipment")
  assignedTo           User?               @relation("WarehouseAssignedTo", fields: [assignedToId], references: [id])
  materialDefinition   MaterialDefinition? @relation("MaterialDefinitionToWarehouse", fields: [materialDefinitionId], references: [id])
  transferTo           User?               @relation("WarehouseTransfer", fields: [transferToId], references: [id])
  history              WarehouseHistory[]

  locationId           String              @default("gdansk")
  location             WarehouseLocation   @relation(fields: [locationId], references: [id])

  transferLines        LocationTransferLine[] @relation("WarehouseToTransferLines")
}

/// -------------------------------
/// WarehouseHistory
/// -------------------------------
model WarehouseHistory {
  id              String          @id @default(uuid())
  warehouseItemId String
  action          WarehouseAction
  performedById   String
  assignedToId    String?
  actionDate      DateTime        @default(now())
  notes           String?
  quantity        Int?
  assignedOrderId String?

  fromLocationId  String?
  toLocationId    String?

  locationTransferId String?
  locationTransfer   LocationTransfer? @relation("LocationTransferToHistory", fields: [locationTransferId], references: [id])

  warehouseItem   Warehouse       @relation(fields: [warehouseItemId], references: [id])
  performedBy     User            @relation("WarehouseHistoryPerformedBy", fields: [performedById], references: [id])
  assignedTo      User?           @relation("WarehouseHistoryAssignedTo", fields: [assignedToId], references: [id])
  assignedOrder   Order?          @relation("OrderToWarehouseHistory", fields: [assignedOrderId], references: [id])
}

/// -------------------------------
/// WarehouseLocation
/// -------------------------------
model WarehouseLocation {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  items     Warehouse[]

  users User[] @relation("UserLocations")

  transfersFrom LocationTransfer[] @relation("TransfersFromLocation")
  transfersTo   LocationTransfer[] @relation("TransfersToLocation")
}

/// -------------------------------
/// LocationTransfer
/// -------------------------------
model LocationTransfer {
  id             String                 @id @default(uuid())
  fromLocationId String
  toLocationId   String
  status         LocationTransferStatus @default(REQUESTED)

  notes          String?
  createdAt      DateTime               @default(now())
  requestedById  String
  confirmedById  String?
  confirmedAt    DateTime?

  fromLocation   WarehouseLocation      @relation("TransfersFromLocation", fields: [fromLocationId], references: [id])
  toLocation     WarehouseLocation      @relation("TransfersToLocation",   fields: [toLocationId],   references: [id])

  requestedBy    User                   @relation("RequestedTransfers", fields: [requestedById], references: [id])
  confirmedBy    User?                  @relation("ConfirmedTransfers", fields: [confirmedById], references: [id])

  lines          LocationTransferLine[]
  histories      WarehouseHistory[]     @relation("LocationTransferToHistory")

  @@index([fromLocationId])
  @@index([toLocationId])
  @@index([status])
}

/// -------------------------------
/// LocationTransferLine
/// -------------------------------
model LocationTransferLine {
  id                   String              @id @default(uuid())
  transferId           String
  itemType             WarehouseItemType
  category             DeviceCategory?

  warehouseItemId      String?
  materialDefinitionId String?
  quantity             Int?
  unit                 MaterialUnit?

  nameSnapshot         String?
  indexSnapshot        String?

  transfer             LocationTransfer    @relation(fields: [transferId], references: [id])
  warehouseItem        Warehouse?          @relation("WarehouseToTransferLines", fields: [warehouseItemId], references: [id])
  materialDefinition   MaterialDefinition? @relation("MaterialDefinitionToTransferLines", fields: [materialDefinitionId], references: [id])

  @@index([transferId])
  @@index([warehouseItemId])
  @@index([materialDefinitionId])
}

/// -------------------------------
/// DeviceDefinition
/// -------------------------------
model DeviceDefinition {
  id           String         @id @default(uuid())
  category     DeviceCategory
  provider     DeviceProvider?
  name         String
  alarmAlert   Int?           @default(5)
  warningAlert Int?           @default(10)
  price        Float?         @default(0)
}

/// -------------------------------
/// MaterialDefinition
/// -------------------------------
model MaterialDefinition {
  id             String                  @id @default(uuid())
  name           String                  @unique
  alarmAlert     Int?                    @default(5)
  index          String?
  warningAlert   Int?                    @default(10)
  unit           MaterialUnit            @default(PIECE)
  price          Float?                  @default(0)

  orderMaterials OrderMaterial[]         @relation("MaterialToOrderMaterial")
  warehouseItems Warehouse[]             @relation("MaterialDefinitionToWarehouse")
  transferLines  LocationTransferLine[]  @relation("MaterialDefinitionToTransferLines")
}

/// -------------------------------
model OperatorDefinition {
  operator String @unique
}

/// -------------------------------
model RateDefinition {
  id          String                 @id @default(uuid())
  code        String                 @unique
  amount      Float
  settlements OrderSettlementEntry[] @relation("RateDefinitionToSettlement")
}

/// -------------------------------
model TechnicianSettings {
  userId          String   @id
  workingDaysGoal Int
  revenueGoal     Float
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
}

/// -------------------------------
/// ENUMS
/// -------------------------------
enum Role {
  TECHNICIAN
  COORDINATOR
  WAREHOUSEMAN
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum OrderStatus {
  PENDING
  ASSIGNED
  COMPLETED
  NOT_COMPLETED
}

enum OrderType {
  INSTALATION
  SERVICE
  OUTAGE
}

enum TimeSlot {
  EIGHT_TEN          @map("8-10")
  TEN_TWELVE         @map("10-12")
  TWELVE_FOURTEEN    @map("12-14")
  FOURTEEN_SIXTEEN   @map("14-16")
  SIXTEEN_EIGHTEEN   @map("16-18")
  EIGHTEEN_TWENTY    @map("18-20")
  NINE_TWELVE        @map("9-12")
  TWELVE_FIFTEEN     @map("12-15")
  FIFTEEN_EIGHTEEN   @map("15-18")
  EIGHTEEN_TWENTYONE @map("18-21")
  EIGHT_NINE         @map("8-9")
  NINE_TEN           @map("9-10")
  TEN_ELEVEN         @map("10-11")
  ELEVEN_TWELVE      @map("11-12")
  TWELVE_THIRTEEN    @map("12-13")
  THIRTEEN_FOURTEEN  @map("13-14")
  FOURTEEN_FIFTEEN   @map("14-15")
  FIFTEEN_SIXTEEN    @map("15-16")
  SIXTEEN_SEVENTEEN  @map("16-17")
  SEVENTEEN_EIGHTEEN @map("17-18")
  EIGHTEEN_NINETEEN  @map("18-19")
  NINETEEN_TWENTY    @map("19-20")
  TWENTY_TWENTYONE   @map("20-21")
}

enum WarehouseItemType {
  DEVICE
  MATERIAL
}

enum DeviceCategory {
  MODEM
  DECODER_1_WAY
  DECODER_2_WAY
  OTHER
  AMPLIFIER
  ONT
  UA
}

enum MaterialUnit {
  PIECE
  METER
}

enum WarehouseStatus {
  AVAILABLE
  ASSIGNED
  RETURNED
  ASSIGNED_TO_ORDER
  RETURNED_TO_OPERATOR
  TRANSFER
  COLLECTED_FROM_CLIENT
}

enum WarehouseAction {
  RECEIVED
  ISSUED
  RETURNED
  RETURNED_TO_OPERATOR
  TRANSFER
  COLLECTED_FROM_CLIENT
}

enum ServiceType {
  DTV
  NET
  TEL
  ATV
}

enum DeviceProvider {
  VECTRA
  MMP
}

enum LocationTransferStatus {
  REQUESTED
  IN_TRANSIT
  RECEIVED
  REJECTED
  CANCELED
}
